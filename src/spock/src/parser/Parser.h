/*
 * ISC License
 *
 * Copyright (C) 2000-2018 by
 *	Xander Burgerhout
 *	Simon de Graaf
 *	N.P. van der Meijs
 * Delft University of Technology
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */
#ifndef __PARSER_H__
#define __PARSER_H__

// STL includes
#include <map>
#include <vector>
#include <string>
#include <utility>

// Forward declarations
class CComponent;
class CGeneratorComp;
class CValueMap;
class CComponentTree;
class CGenerators;

//! Utility class for the parser generated by bison (yacc).
/*!
    Bison (or yacc) calls the methods of this class in its actions. This class
    contains the necessary stacks and other temporary storage space that is
    needed to create the component tree and generators.

    It also contains methods to register and display the parse errors that
    are encountered during parsing. Parse errors include any disambiguation
    errors that are encounterd, so disambiguation routines are also included.

    After the parser has succesfully completed its job, this class can provide
    the application with the parse results. This class is implemented as a
    singleton class to make access to this class easy and to insure only one
    CParser object will exist.

    The best way to understand how this class works is to examine the
    Parser.cc file which implement this class methods in conjunction with
    the bison (yacc) sourcefile, parse.y.

    \sa CComponent, CComponentTree, CGeneratorComp, CGenerators, CValueMap

    \author Xander Burgerhout
*/
class CParser
{
    private:
	int                     m_versionMajor;
	int                     m_versionMinor;

	// These will be initalized in the constructor
	vector<string>          m_propertiesToDisambiguate;

	// The component stack is used during parsing
	vector<CComponent*>     m_componentStack;
	map<string, string>     m_forEachIterMap;

	// Storage space for the component tree, defines, generator tree and
	// a mapping of declarations and linenumbers.
	CComponentTree*         m_allComps;       // needed by the parser
	vector<CComponent*>     m_defines;
	map<CComponent*, int>   m_declarations;

	CComponentTree*         m_componentTree;
	CGenerators*            m_generatorTree;

	// The accumulated errors
	string                  m_parseErrors;

	vector<string>          m_propertyList;

	// The m_currentValMap is used during parsing
	CValueMap*              m_currentValMap;

	string                  m_iconPath;

	static CParser*         m_singleton;

    protected:
	CParser();

    public:
	static CParser*         instance();

	void                    setVersion(int major, int minor);
	int                     getMajorVersion();
	int                     getMinorVersion();

	CComponent*             newComp();  // implicit push
	void                    push(CComponent* comp);
	CComponent*             pop();
	CComponent*             currentParent();
	CComponent*             currentComp();

	void                    setLineNumber(CComponent* comp = 0);
	string                  disambiguate(const string& src, const string context = "");
	string                  disambiguate(const string& src, CComponent* comp);
	void                    disambiguateDataSources();
	void                    mapForEachIterator(const string& src, const string& compName);
	void                    unmapForEachIterator(const string& src);
	string                  getMappedIterator(const string& iter);

	void                    parseError(const string& errorTxt);
	string                  getErrorText();
	void                    displayErrorAndExit();

	CComponent*             createFromDefine(const string& def, CComponent* parent = 0);
	CComponentTree*         copyComponentTree();
	CGenerators*            getGenerators();

	CComponent*             findComponent(const string& name);
	void                    testComponent(const string& name);
	void                    addComponent(CComponent* comp);
	void                    addGeneratorComp(CGeneratorComp* generator);
	void                    addDefine(CComponent* define);

	void                    addToPropertyList(const string& src);
	void                    clearPropertyList();
	vector<string>          getPropertyList();

	CValueMap*              getValueMap();
	CValueMap*              newValueMap();

	void                    setIconPath(const string& src);
	string                  getIconPath();

	// Debug methods
	void                    dumpGlobals();
	void                    dumpStack();
};

#endif // __PARSER_H__
