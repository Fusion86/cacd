/*
 * ISC License
 *
 * Copyright (C) 2000-2018 by
 *	Xander Burgerhout
 *	Simon de Graaf
 *	N.P. van der Meijs
 * Delft University of Technology
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */
#ifndef __GENERATOR_H__
#define __GENERATOR_H__

// Project includes
#include "src/spock/src/datastruct/Component.h"

// STL includes
#include <vector>
#include <map>
#include <string>

//============================================================================
//! Maps identifiers in generate statements to certain values
/*!
    The CValueMap class is used by CGeneratorComp to provide a mapping
    between values in a dropdown or combobox and the values that need
    to be generated by the generator.

    This class accomodates the following language construct in the
    techfile language:

    \code
    map term_text_align {
        al_00   = "0 0";
        al_n10  = "-1 0";
        al_10   = "1 0";
        al_01   = "0 1";
        al_0n1  = "0 -1";
    }
    \endcode

    This maps the al_* items in term_text_align to the values that should
    be generated by the generator.

    \sa CGeneratorComp, CGenerators
    \author Xander Burgerhout
*/
class CValueMap
{
    private:
	map<string, string> m_mapping;  //!< contains the mapping
	string              m_context;  //!< context of the identifier

    public:
	string              getContext() const;
	void                setContext(const string& context);
	void                makeMap(const string& from, const string& to);
	string              getMapped(const string& src);
};

//============================================================================
//! A special component used in generator trees
/*!
    CGeneratorComp is derived from CComponent. The added functionality is
    the addition of translation maps, implemented with CValueMap.

    The difference between CComponent objects and CGeneratorComp objects is
    the interpretation. A tree of CGeneratorComp objects represents the
    structure of the file that must be generated, while a tree of CComponent
    objects is a description of how the user interface should look.

    A CGeneratorComp component can describe many things:
    <ul>
        <li> Literal text that should be inserted </li>
        <li> Identifiers whose value or a property if that value must be
             inserted </li>
        <li> Loops, iterating over the rows in a spreadsheet or all
             the values a spreadsheet column contains </li>
        <li> Conditional generation statements </li>
    </ul>

    Please refer to Xander Burgerhout's graduation report or the
    Techfile Language Reference for a complete reference on the language elements.

    \sa CGenerators, CValueMap, CComponent, CComponentTree
    \author Xander Burgerhout
*/
class CGeneratorComp : public CComponent
{
    private:
	vector<CValueMap*>      m_mappings;     //!< The value maps

    public:
	CGeneratorComp(CComponent* parent = 0, const string& name = "Unnamed");

	int                 numMaps() const;
	CValueMap*          getMapping(int index) const;
	void                addMapping(CValueMap* map);
	string              getMapped(const string& type, const string& item);
};

//============================================================================
//! All the generators together in a class
/*!
    What CComponentTree does for CComponent is what CGenerators does for
    CGeneratorComp. It binds together all separte generators into one class
    that allows easy access to the generators.

    At this point, the CGenerators class is not much more than an array
    of generators. However, in the future, methods that act on the generators
    could be added here.

    \sa CGeneratorComp, CComponentTree
    \author Xander Burgerhout
*/
class CGenerators
{
    private:
	vector<CGeneratorComp*> m_generators;   //!< The generators.

    public:
	CGenerators();

	void                    addGeneratorComp(CGeneratorComp* comp);
	int                     numGenerators();
	CGeneratorComp*         getGenerator(int index);
};

#endif // __GENERATOR_H__
