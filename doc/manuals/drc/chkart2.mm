.nr Hy 0
.SA 1
.nr Ej 1
.nr Fg 0
.H 1 "Augmented Instancing of a cell"
The layout description of an integrated circuit is usually
available as an hierarchy of cells,
in which each cell is made up of primitives (rectangles,
wires etc.) and references to other cells.
The basic problem we meet when we try to exploit the hierarchy
is the influence the cells can have on each other.
Consider for instance the cell given in figure \n(H1.1.
To interconnect the cells m2 and m3,
referenced in cell m1, among themselves as well as with the primitives
defined in cell m1, primitives of different cells have to overlap.
.DS
.PS < ../drc/fig1.pic
.PE
.FG "Cell interconnection" \n(H1.
.DE
These primitives necessarily cross an imaginary boundary that
can be drawn at some distance around the cell to protect its
contents from disturbances from the outside.
The problem now is that the analysis of two instances of the
same cell can be quite different.
For instance in the case of artwork checking,
the interfringing primitives may create new errors or,
conversely remove errors that were previously present.
Also new and unwanted elements may be generated by
overlapping primitives originating from different cells.
.P
The solution we propose was developed with existing design
practice in mind.
It limits the designer in some ways,
but leaves him free as much as possible.
The restrictions imposed on an individual cell design are:
.AL
.LI
The referenced cells should be free of design rule errors.
.LI
The implied circuit of the cells referenced may not be changed
as a result of interfringing primitives.
.LE
.P
To make a consistent design system we will have to insure
that these restrictions are obeyed.
The first restriction is obeyed almost automatically.
Given a design rule checker it suffices to check the cells in
the cell hierarchy individually.
The second one is more difficult.
By checking the places where primitives of different
cells have an overlap, and signaling if they do so, the
violations of the second rule can be discovered too.
This check is carried out in the program nbool(see section 4).
In the sequel we shall assume that the mask data is given
in the form of an ordered line segment file, one per mask,
with extra masks for the intercell terminals (see further).
Such files can be obtained by the same type of
algorithm as for the  design rule checker, see section 3.
.P
To handle the hierarchical  design rule checker, we define
the 'augmented cell instance' of a cell.
It contains the information necessary for the checking of
the design rules,
of the cells independently from its subcells.
It can also handle the extraction of the circuit from the artwork.
(see the paper on extract on this volume).
Crucial in the definition of the augmented cell instance is the
concept of 'active region'.
The active regions of a cell surround the places where the implied
circuits of the referenced cells can be changed, or the
design rules might be violated.
We associate an active region with each primitive defined
in the cell, as well as with each overlap of cell frames.
A cell frame is an orthogonal rectangle that surrounds a cell
as close as possible.
The active regions associated with the primitives of a cell
are determined by growing the dimensions of the
primitives with a constant, but mask dependent parameter,
the 'expand_offset'.
The active regions associated with the overlapping cell frames
are determined by growing the dimensions of the overlap region
with the maximum of the expand_offsets just mentioned.
Furthermore we define a 'checktype' to distinguish primitives
originating from different cells.
The checktype '0' is associated with primitives defined in the
top level cell, all other primitives get a positive integer
as checktype.
.P
The program which determines the 'augmented instances' of cells
is the program mkbox.
This program reads from the database the data of the primitives of the
cells involved and the files determining their hierarchy.
From this data it makes (for each cell desired) a file consisting
of all the rectangles of the artwork forming the 'augmented instance'
of that cell.
This file also contains the following primitives:
.BL
.LI
All rectangles of the top level cell.
Those rectangles have a checktype zero
.LI
All rectangles  of sub_cells and sub_sub_cells etc.(recursively)
that have an overlap with one of the active regions of the
rectangles of the top level cell.
As their checktype these rectangles have a
positive integer characteristic for the cell they originate from.
.LI
All rectangles of sub_cells that have an overlap with the
active regions associated with the overlap of sub_cells.
As their checktype these rectangles also have a
positive integer indicating which cell they originate from.
.LE

