%!PS-Adobe-2.0
%%Creator: dvips, version 5.4
%%Title: mu111.dvi
%%Pages: 2 1
%%BoundingBox: 0 0 612 1008
%%EndComments
%%BeginProcSet: tex.pro
/TeXDict 200 dict def TeXDict begin /N /def load def /B{bind def}N /S /exch
load def /X{S N}B /TR /translate load N /isls false N /vsize 10 N /@rigin{
isls{[0 1 -1 0 0 0]concat}if 72 Resolution div 72 VResolution div neg scale
Resolution VResolution vsize neg mul TR}B /@letter{/vsize 10 N}B /@landscape{
/isls true N /vsize -1 N}B /@a4{/vsize 10.6929133858 N}B /@a3{/vsize 15.5531 N
}B /@ledger{/vsize 16 N}B /@legal{/vsize 13 N}B /@manualfeed{statusdict
/manualfeed true put}B /@copies{/#copies X}B /FMat[1 0 0 -1 0 0]N /FBB[0 0 0 0
]N /df{/sf 1 N /fntrx FMat N df-tail}B /dfs{div /sf X /fntrx[sf 0 0 sf neg 0 0
]N df-tail}B /df-tail{/nn 8 dict N nn begin /FontType 3 N /FontMatrix fntrx N
/FontBBox FBB N string /base X array /BitMaps X /BuildChar{CharBuilder}N
/Encoding IE N end dup{/foo setfont}2 array copy cvx N load 0 nn put /ctr 0 N[
}B /E{pop nn dup definefont setfont}B /ch-image{ch-data dup type /stringtype
ne{ctr get /ctr ctr 1 add N}if}B /ch-width{ch-data dup length 5 sub get}B
/ch-height{ch-data dup length 4 sub get}B /ch-xoff{128 ch-data dup length 3
sub get sub}B /ch-yoff{ch-data dup length 2 sub get 127 sub}B /ch-dx{ch-data
dup length 1 sub get}B /ctr 0 N /CharBuilder{save 3 1 roll S dup /base get 2
index get S /BitMaps get S get /ch-data X pop /ctr 0 N ch-dx 0 ch-xoff ch-yoff
ch-height sub ch-xoff ch-width add ch-yoff setcachedevice ch-width ch-height
true[1 0 0 -1 -.1 ch-xoff sub ch-yoff .1 add]{ch-image}imagemask restore}B /D{
/cc X dup type /stringtype ne{]}if nn /base get cc ctr put nn /BitMaps get S
ctr S sf 1 ne{dup dup length 1 sub dup 2 index S get sf div put}if put /ctr
ctr 1 add N}B /I{cc 1 add D}B /bop{userdict /bop-hook known{bop-hook}if /SI
save N @rigin 0 0 moveto}B /eop{clear SI restore showpage userdict /eop-hook
known{eop-hook}if}B /@start{userdict /start-hook known{start-hook}if
/VResolution X /Resolution X 1000 div /DVImag X /IE 256 array N 0 1 255{IE S 1
string dup 0 3 index put cvn put}for}B /p /show load N /RMat[1 0 0 -1 0 0]N
/BDot 8 string N /v{/ruley X /rulex X V}B /V{gsave TR -.1 -.1 TR rulex ruley
scale 1 1 false RMat{BDot}imagemask grestore}B /a{moveto}B /delta 0 N /tail{
dup /delta X 0 rmoveto}B /M{S p delta add tail}B /b{S p tail}B /c{-4 M}B /d{
-3 M}B /e{-2 M}B /f{-1 M}B /g{0 M}B /h{1 M}B /i{2 M}B /j{3 M}B /k{4 M}B /l{p
-4 w}B /m{p -3 w}B /n{p -2 w}B /o{p -1 w}B /q{p 1 w}B /r{p 2 w}B /s{p 3 w}B /t
{p 4 w}B /w{0 rmoveto}B /x{0 S rmoveto}B /y{3 2 roll p a}B /bos{/SS save N}B
/eos{clear SS restore}B end
%%EndProcSet
%%BeginProcSet: special.pro
TeXDict begin /SDict 200 dict N SDict begin /@SpecialDefaults{/hs 612 N /vs
792 N /ho 0 N /vo 0 N /hsc 1 N /vsc 1 N /ang 0 N /CLIP false N /BBcalc false N
/p 3 def}B /@scaleunit 100 N /@hscale{@scaleunit div /hsc X}B /@vscale{
@scaleunit div /vsc X}B /@hsize{/hs X /CLIP true N}B /@vsize{/vs X /CLIP true
N}B /@hoffset{/ho X}B /@voffset{/vo X}B /@angle{/ang X}B /@rwi{10 div /rwi X}
B /@llx{/llx X}B /@lly{/lly X}B /@urx{/urx X}B /@ury{/ury X /BBcalc true N}B
/magscale true def end /@MacSetUp{userdict /md known{userdict /md get type
/dicttype eq{md begin /letter{}N /note{}N /legal{}N /od{txpose 1 0 mtx
defaultmatrix dtransform S atan/pa X newpath clippath mark{transform{
itransform moveto}}{transform{itransform lineto}}{6 -2 roll transform 6 -2
roll transform 6 -2 roll transform{itransform 6 2 roll itransform 6 2 roll
itransform 6 2 roll curveto}}{{closepath}}pathforall newpath counttomark array
astore /gc xdf pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{
PaintBlack}if}N /txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR
pop 1 -1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip yflip
not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub neg 0 TR}if
yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{noflips{TR pop pop 270
rotate 1 -1 scale}if xflip yflip and{TR pop pop 90 rotate 1 -1 scale ppr 3 get
ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip yflip not
and{TR pop pop 90 rotate ppr 3 get ppr 1 get neg sub neg 0 TR}if yflip xflip
not and{TR pop pop 270 rotate ppr 2 get ppr 0 get neg sub neg 0 S TR}if}
ifelse scaleby96{ppr aload pop 4 -1 roll add 2 div 3 1 roll add 2 div 2 copy
TR .96 dup scale neg S neg S TR}if}N /cp{pop pop showpage pm restore}N end}if}
if}N /normalscale{Resolution 72 div VResolution 72 div neg scale magscale{
DVImag dup scale}if}N /psfts{S 65536 div N}N /startTexFig{/psf$SavedState save
N userdict maxlength dict begin /magscale false def normalscale currentpoint
TR /psf$ury psfts /psf$urx psfts /psf$lly psfts /psf$llx psfts /psf$y psfts
/psf$x psfts currentpoint /psf$cy X /psf$cx X /psf$sx psf$x psf$urx psf$llx
sub div N /psf$sy psf$y psf$ury psf$lly sub div N psf$sx psf$sy scale psf$cx
psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub TR /showpage{}N
/erasepage{}N /copypage{}N @MacSetUp}N /doclip{psf$llx psf$lly psf$urx psf$ury
currentpoint 6 2 roll newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S
lineto S lineto closepath clip newpath moveto}N /endTexFig{end psf$SavedState
restore}N /@beginspecial{SDict begin /SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults}B /@setspecial{CLIP{newpath 0 0 moveto hs 0
rlineto 0 vs rlineto hs neg 0 rlineto closepath clip}{initclip}ifelse ho vo TR
hsc vsc scale ang rotate BBcalc{rwi urx llx sub div dup scale llx neg lly neg
TR}if /showpage{}N /erasepage{}N /copypage{}N newpath}B /@endspecial{grestore
clear SpecialSave restore end}B /@defspecial{SDict begin}B /@fedspecial{end}B
/li{lineto}B /rl{rlineto}B /rc{rcurveto}B /np{/SaveX currentpoint /SaveY X N 1
setlinecap newpath}B /st{stroke SaveX SaveY moveto}B /fil{fill SaveX SaveY
moveto}B /ellipse{/endangle X /startangle X /yrad X /xrad X /savematrix matrix
currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc savematrix
setmatrix}B end
%%EndProcSet
TeXDict begin 1000 300 300 @start /Fa 5 111 df<07FE1FF800E0038000E0038000E003
8000E0038001C0070001C0070001C0070001C0070003800E0003800E0003FFFE0003800E000700
1C0007001C0007001C0007001C000E0038000E0038000E0038000E0038001C007000FF83FE001D
177F961D>72 D<07FF0000E00000E00000E00000E00001C00001C00001C00001C0000380000380
000380000380000700000700080700080700100E00100E00300E00200E00601C01E0FFFFC01517
7F9618>76 D<07FFF800E00E00E00700E00700E00701C00701C00701C00701C00E03801C038070
03FFC00380000700000700000700000700000E00000E00000E00000E00001C0000FF800018177F
9616>80 D<0300038003000000000000000000000000001C002400460046008C000C0018001800
180031003100320032001C0009177F960C>105 D<383C0044C6004702004602008E06000C0600
0C06000C0C00180C00180C40181840181880300880300F00120E7F8D15>110
D E /Fb 53 122 df<00008000000001C000000001C000000003E000000003E000000005F00000
0004F000000008F80000000878000000107C000000103C000000203E000000201E000000401F00
0000400F000000800F80000080078000010007C000010003C000020003E000020001E000040001
F000040000F000080000F80008000078001000007C001000003C002000003E002000001E007FFF
FFFF007FFFFFFF00FFFFFFFF8021207E9F26>1 D<0020004000800100020006000C000C001800
18003000300030007000600060006000E000E000E000E000E000E000E000E000E000E000E000E0
006000600060007000300030003000180018000C000C000600020001000080004000200B2E7DA1
12>40 D<800040002000100008000C00060006000300030001800180018001C000C000C000C000
E000E000E000E000E000E000E000E000E000E000E000E000C000C000C001C00180018001800300
0300060006000C00080010002000400080000B2E7DA112>I<70F8FCFC74040404080810102040
060E7C840D>44 D<FFC0FFC00A027F8A0F>I<70F8F8F87005057C840D>I<000300030007000600
06000E000C000C001C0018001800380030003000700060006000E000C000C001C0018001800180
0380030003000700060006000E000C000C001C0018001800380030003000700060006000E000C0
00C000102D7DA117>I<03F0000E1C001C0E00180600380700700380700380700380700380F003
C0F003C0F003C0F003C0F003C0F003C0F003C0F003C0F003C0F003C0F003C0F003C0F003C07003
807003807003807807803807001806001C0E000E1C0003F000121F7E9D17>I<018003800F80F3
800380038003800380038003800380038003800380038003800380038003800380038003800380
0380038003800380038007C0FFFE0F1E7C9D17>I<03F0000C1C00100E00200700400780800780
F007C0F803C0F803C0F803C02007C00007C0000780000780000F00000E00001C00003800007000
00600000C0000180000300000600400C00401800401000803FFF807FFF80FFFF80121E7E9D17>
I<007C000182000701000E03800C07801C0780380300380000780000700000700000F1F000F21C
00F40600F80700F80380F80380F003C0F003C0F003C0F003C0F003C07003C07003C07003803803
803807001807000C0E00061C0001F000121F7E9D17>54 D<4000007FFFC07FFF807FFF80400100
80020080020080040000080000080000100000200000200000400000400000C00000C00001C000
018000038000038000038000038000078000078000078000078000078000078000078000030000
121F7D9D17>I<03F0000C0C001006003003002001806001806001806001807001807803003E03
003F06001FC8000FF00003F80007FC000C7E00103F00300F806003804001C0C001C0C000C0C000
C0C000C0C000806001802001001002000C0C0003F000121F7E9D17>I<03F0000E18001C0C0038
0600380700700700700380F00380F00380F003C0F003C0F003C0F003C0F003C07007C07007C038
07C0180BC00E13C003E3C0000380000380000380000700300700780600780E00700C0020180010
70000FC000121F7E9D17>I<70F8F8F8700000000000000000000070F8F8F87005147C930D>I<00
0100000003800000038000000380000007C0000007C0000007C0000009E0000009E0000009E000
0010F0000010F0000010F00000207800002078000020780000403C0000403C0000403C0000801E
0000801E0000FFFE0001000F0001000F0001000F00020007800200078002000780040003C00E00
03C01F0007E0FFC03FFE1F207F9F22>65 D<FFFFE0000F80380007801E0007801F0007800F0007
800F8007800F8007800F8007800F8007800F8007800F0007801F0007801E0007803C0007FFF000
07803C0007801E0007800F0007800F8007800780078007C0078007C0078007C0078007C0078007
C00780078007800F8007800F0007801F000F803C00FFFFF0001A1F7E9E20>I<000FC040007030
C001C009C0038005C0070003C00E0001C01E0000C01C0000C03C0000C07C0000407C0000407800
0040F8000000F8000000F8000000F8000000F8000000F8000000F8000000F8000000F800000078
0000007C0000407C0000403C0000401C0000401E0000800E000080070001000380020001C00400
00703800000FC0001A217D9F21>I<FFFFE0000F803C0007801E000780070007800380078003C0
078001E0078001E0078001F0078000F0078000F0078000F8078000F8078000F8078000F8078000
F8078000F8078000F8078000F8078000F8078000F0078000F0078000F0078001E0078001E00780
03C0078003800780070007800E000F803C00FFFFE0001D1F7E9E23>I<FFFFFF000F800F000780
030007800300078001000780018007800080078000800780008007808080078080000780800007
8080000781800007FF800007818000078080000780800007808000078080000780002007800020
07800020078000400780004007800040078000C0078000C0078001800F800F80FFFFFF801B1F7E
9E1F>I<FFFFFF000F800F00078003000780030007800100078001800780008007800080078000
8007800080078080000780800007808000078080000781800007FF800007818000078080000780
800007808000078080000780000007800000078000000780000007800000078000000780000007
8000000FC00000FFFE0000191F7E9E1E>I<000FE0200078186000E004E0038002E0070001E00F
0000E01E0000601E0000603C0000603C0000207C00002078000020F8000000F8000000F8000000
F8000000F8000000F8000000F8000000F8007FFCF80003E0780001E07C0001E03C0001E03C0001
E01E0001E01E0001E00F0001E0070001E0038002E000E0046000781820000FE0001E217D9F24>
I<FFF8FFF80F800F8007800F0007800F0007800F0007800F0007800F0007800F0007800F000780
0F0007800F0007800F0007800F0007800F0007FFFF0007800F0007800F0007800F0007800F0007
800F0007800F0007800F0007800F0007800F0007800F0007800F0007800F0007800F0007800F00
0F800F80FFF8FFF81D1F7E9E22>I<FFFC0FC00780078007800780078007800780078007800780
078007800780078007800780078007800780078007800780078007800780078007800FC0FFFC0E
1F7F9E10>I<FFFE000FC000078000078000078000078000078000078000078000078000078000
078000078000078000078000078000078000078000078000078000078002078002078002078002
07800607800407800407800C07801C0F807CFFFFFC171F7E9E1C>76 D<FF803FF807C007C007C0
038005E0010005E0010004F001000478010004780100043C0100043C0100041E0100040F010004
0F010004078100040781000403C1000401E1000401E1000400F1000400F1000400790004003D00
04003D0004001F0004001F0004000F0004000700040007000E0003001F000300FFE001001D1F7E
9E22>78 D<FFFFE0000F80780007801C0007801E0007800F0007800F8007800F8007800F800780
0F8007800F8007800F8007800F0007801E0007801C000780780007FFE000078000000780000007
800000078000000780000007800000078000000780000007800000078000000780000007800000
078000000FC00000FFFC0000191F7E9E1F>80 D<07E0800C1980100780300380600180600180E0
0180E00080E00080E00080F00000F000007800007F00003FF0001FFC000FFE0003FF00001F8000
07800003C00003C00001C08001C08001C08001C08001C0C00180C00380E00300F00600CE0C0081
F80012217D9F19>83 D<7FFFFFE0780F01E0600F0060400F0020400F0020C00F0030800F001080
0F0010800F0010800F0010000F0000000F0000000F0000000F0000000F0000000F0000000F0000
000F0000000F0000000F0000000F0000000F0000000F0000000F0000000F0000000F0000000F00
00000F0000000F0000001F800007FFFE001C1F7E9E21>I<FFF003FE1F8000F80F0000600F8000
60078000400780004003C0008003C0008003C0008001E0010001E0010001F0010000F0020000F0
020000F806000078040000780400003C0800003C0800003C0800001E1000001E1000001F300000
0F2000000F20000007C0000007C0000007C000000380000003800000038000000100001F207F9E
22>86 D<FFF07FF81FF01F800FC007C00F00078003800F00078001000F0007C00100078007C002
00078007C00200078007C0020003C009E0040003C009E0040003C009E0040003E010F00C0001E0
10F0080001E010F0080001F02078080000F02078100000F02078100000F0403C10000078403C20
000078403C20000078C03E2000003C801E4000003C801E4000003C801E4000001F000F8000001F
000F8000001F000F8000001E00078000000E00070000000E00070000000C000300000004000200
002C207F9E2F>I<FFF003FF1F8000F80F8000600780004007C0004003E0008001E0008001F001
0000F0030000F80200007C0400003C0400003E0800001E0800001F1000000FB0000007A0000007
C0000003C0000003C0000003C0000003C0000003C0000003C0000003C0000003C0000003C00000
03C0000003C0000007C000007FFE00201F7F9E22>89 D<1FE000303000781800781C00300E0000
0E00000E00000E0000FE00078E001E0E00380E00780E00F00E10F00E10F00E10F01E10781E1038
67200F83C014147E9317>97 D<0E0000FE00000E00000E00000E00000E00000E00000E00000E00
000E00000E00000E00000E3E000EC3800F01C00F00E00E00E00E00700E00700E00780E00780E00
780E00780E00780E00780E00700E00700E00E00F00E00D01C00CC300083E0015207F9F19>I<03
F80E0C1C1E381E380C70007000F000F000F000F000F000F00070007000380138011C020E0C03F0
10147E9314>I<000380003F800003800003800003800003800003800003800003800003800003
8000038003E380061B801C0780380380380380700380700380F00380F00380F00380F00380F003
80F003807003807003803803803807801C07800E1B8003E3F815207E9F19>I<03F0000E1C001C
0E00380700380700700700700380F00380F00380FFFF80F00000F00000F0000070000070000038
00801800800C010007060001F80011147F9314>I<0000E003E3300E3C301C1C30380E00780F00
780F00780F00780F00780F00380E001C1C001E380033E0002000002000003000003000003FFE00
1FFF800FFFC03001E0600070C00030C00030C00030C000306000603000C01C038003FC00141F7F
9417>103 D<0E0000FE00000E00000E00000E00000E00000E00000E00000E00000E00000E0000
0E00000E3E000E43000E81800F01C00F01C00E01C00E01C00E01C00E01C00E01C00E01C00E01C0
0E01C00E01C00E01C00E01C00E01C00E01C00E01C0FFE7FC16207F9F19>I<1C001E003E001E00
1C000000000000000000000000000E007E000E000E000E000E000E000E000E000E000E000E000E
000E000E000E000E000E000E00FFC00A1F809E0C>I<00E001F001F001F000E000000000000000
0000000000007007F000F000700070007000700070007000700070007000700070007000700070
00700070007000700070007000706070F060F0C061803F000C28829E0E>I<0E00FE000E000E00
0E000E000E000E000E000E000E000E000E000E000E000E000E000E000E000E000E000E000E000E
000E000E000E000E000E000E000E00FFE00B20809F0C>108 D<0E1F01F000FE618618000E81C8
1C000F00F00E000F00F00E000E00E00E000E00E00E000E00E00E000E00E00E000E00E00E000E00
E00E000E00E00E000E00E00E000E00E00E000E00E00E000E00E00E000E00E00E000E00E00E000E
00E00E00FFE7FE7FE023147F9326>I<0E3E00FE43000E81800F01C00F01C00E01C00E01C00E01
C00E01C00E01C00E01C00E01C00E01C00E01C00E01C00E01C00E01C00E01C00E01C0FFE7FC1614
7F9319>I<01F800070E001C03803801C03801C07000E07000E0F000F0F000F0F000F0F000F0F0
00F0F000F07000E07000E03801C03801C01C0380070E0001F80014147F9317>I<0E3E00FEC380
0F01C00F00E00E00E00E00F00E00700E00780E00780E00780E00780E00780E00780E00700E00F0
0E00E00F01E00F01C00EC3000E3E000E00000E00000E00000E00000E00000E00000E00000E0000
FFE000151D7F9319>I<0E78FE8C0F1E0F1E0F0C0E000E000E000E000E000E000E000E000E000E
000E000E000E000E00FFE00F147F9312>114 D<1F9030704030C010C010C010E00078007F803F
E00FF00070803880188018C018C018E030D0608F800D147E9312>I<020002000200060006000E
000E003E00FFF80E000E000E000E000E000E000E000E000E000E000E000E080E080E080E080E08
0610031001E00D1C7F9B12>I<0E01C0FE1FC00E01C00E01C00E01C00E01C00E01C00E01C00E01
C00E01C00E01C00E01C00E01C00E01C00E01C00E01C00E03C00603C0030DC001F1FC16147F9319
>I<FF83F81E01E01C00C00E00800E00800E008007010007010003820003820003820001C40001
C40001EC0000E80000E80000700000700000700000200015147F9318>I<7FC3FC0F01E00701C0
07018003810001C20000E40000EC00007800003800003C00007C00004E00008700010700030380
0201C00601E01E01E0FF07FE1714809318>120 D<FF83F81E01E01C00C00E00800E00800E0080
07010007010003820003820003820001C40001C40001EC0000E80000E800007000007000007000
002000002000004000004000004000F08000F08000F100006200003C0000151D7F9318>I
E /Fc 11 121 df<000E00001E00007E0007FE00FFFE00FFFE00F8FE0000FE0000FE0000FE0000
FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000
FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE007F
FFFE7FFFFE7FFFFE17277BA622>49 D<FFFE0000001FFFC0FFFE0000001FFFC0FFFF0000003FFF
C003FF0000003FF00003FF0000003FF00003BF80000077F00003BF80000077F000039FC00000E7
F000039FC00000E7F000038FE00001C7F000038FE00001C7F0000387F0000387F0000387F00003
87F0000387F0000387F0000383F8000707F0000383F8000707F0000381FC000E07F0000381FC00
0E07F0000380FE001C07F0000380FE001C07F0000380FF003807F00003807F003807F00003807F
003807F00003803F807007F00003803F807007F00003801FC0E007F00003801FC0E007F0000380
0FE1C007F00003800FE1C007F00003800FE1C007F000038007F38007F000038007F38007F00003
8003FF0007F000038003FF0007F000038001FE0007F000038001FE0007F000038000FC0007F000
038000FC0007F000FFFE00FC01FFFFC0FFFE007801FFFFC0FFFE007801FFFFC03A297DA841>77
D<003FE00001FFF80003F07E000FE03F001FC01F803F800FC03F800FC07F000FC07F0007E0FF00
07E0FF0007E0FF0007E0FFFFFFE0FFFFFFE0FF000000FF000000FF000000FF0000007F0000007F
8000003F8000E03F8001E01FC001C00FE003C003F81F8000FFFE00001FF0001B1B7E9A20>101
D<07001FC01FE03FE03FE03FE01FE01FC007000000000000000000000000000000FFE0FFE0FFE0
0FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00F
E00FE0FFFEFFFEFFFE0F2B7DAA14>105 D<FFE0FFE0FFE00FE00FE00FE00FE00FE00FE00FE00F
E00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE0
0FE00FE00FE00FE00FE00FE00FE00FE00FE0FFFEFFFEFFFE0F2A7DA914>108
D<FFC07F800FF000FFC1FFE03FFC00FFC783F0F07E000FCE03F9C07F000FDC01FB803F000FF801
FF003F800FF001FE003F800FF001FE003F800FF001FE003F800FE001FC003F800FE001FC003F80
0FE001FC003F800FE001FC003F800FE001FC003F800FE001FC003F800FE001FC003F800FE001FC
003F800FE001FC003F800FE001FC003F800FE001FC003F800FE001FC003F800FE001FC003F800F
E001FC003F800FE001FC003F80FFFE1FFFC3FFF8FFFE1FFFC3FFF8FFFE1FFFC3FFF8351B7D9A3C
>I<FFE1FE0000FFE7FF8000FFFE07E0000FF803F8000FF001FC000FE001FE000FE000FE000FE0
00FF000FE000FF000FE0007F800FE0007F800FE0007F800FE0007F800FE0007F800FE0007F800F
E0007F800FE0007F800FE0007F800FE000FF000FE000FF000FE000FE000FF001FE000FF003FC00
0FF803F8000FFE0FE0000FEFFF80000FE1FC00000FE00000000FE00000000FE00000000FE00000
000FE00000000FE00000000FE00000000FE00000000FE0000000FFFE000000FFFE000000FFFE00
000021277E9A26>112 D<FFC1F0FFC7FCFFCE3E0FDC7F0FD87F0FF87F0FF07F0FF03E0FF0000F
E0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000F
E0000FE000FFFF00FFFF00FFFF00181B7E9A1C>114 D<00700000700000700000700000F00000
F00000F00001F00003F00003F00007F0001FFFF0FFFFF0FFFFF007F00007F00007F00007F00007
F00007F00007F00007F00007F00007F00007F00007F00007F00007F03807F03807F03807F03807
F03807F03807F03803F87001F8F000FFE0001F8015267FA51B>116 D<FFE03FF800FFE03FF800
FFE03FF8000FE003F8000FE003F8000FE003F8000FE003F8000FE003F8000FE003F8000FE003F8
000FE003F8000FE003F8000FE003F8000FE003F8000FE003F8000FE003F8000FE003F8000FE003
F8000FE003F8000FE003F8000FE007F8000FE007F8000FE00FF80007E01FF80003F03BFF8001FF
F3FF80003FC3FF80211B7D9A26>I<FFFC0FFF00FFFC0FFF00FFFC0FFF0007F003C00003F80780
0001FC07800000FE0F000000FF1E0000007F3C0000003FF80000001FF00000000FF00000000FF0
00000007F000000007F80000000FFC0000001FFE0000001EFE0000003C7F000000783F800000F0
1FC00001E01FE00001C00FE00003C007F000FFF01FFF80FFF01FFF80FFF01FFF80211B7F9A24>
120 D E end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 300
TeXDict begin @legal /legal where {pop legal} if
%%EndSetup
%%Page: 1 1
bop 224 904 a Fc(1)69 b(Multiplexer)20 b(m)n(u111)224 1039
y Fb(F)l(unctie:)h(2-line-to-1-line)d(data)d(selector/m)o(ultiplexer)224
1129 y(T)l(erminalv)o(olgorde:)21 b(\(A,)14 b(B,)h(S,)g(Y\))224
1220 y(IEC-sym)o(b)q(o)q(ol:)224 1278 y
 7313760 5631591 7696465 32956661 15919185 39337492 startTexFig
224 1278 a
%%BeginDocument: mu111.iec.eps

50 dict begin

/arrowHeight 8 def
/arrowWidth 4 def
/none null def
/numGraphicParameters 17 def
/stringLimit 65535 def

/Begin {
save
numGraphicParameters dict begin
} def

/End {
end
restore
} def

/SetB {
dup type /nulltype eq {
pop
false /brushRightArrow idef
false /brushLeftArrow idef
true /brushNone idef
} {
/brushDashOffset idef
/brushDashArray idef
0 ne /brushRightArrow idef
0 ne /brushLeftArrow idef
/brushWidth idef
false /brushNone idef
} ifelse
} def

/SetCFg {
/fgblue idef
/fggreen idef
/fgred idef
} def

/SetCBg {
/bgblue idef
/bggreen idef
/bgred idef
} def

/SetF {
/printSize idef
/printFont idef
} def

/SetP {
dup type /nulltype eq {
pop true /patternNone idef
} {
/patternGrayLevel idef
patternGrayLevel -1 eq {
/patternString idef
} if
false /patternNone idef
} ifelse
} def

/BSpl {
0 begin
storexyn
newpath
n 1 gt {
0 0 0 0 0 0 1 1 true subspline
n 2 gt {
0 0 0 0 1 1 2 2 false subspline
1 1 n 3 sub {
/i exch def
i 1 sub dup i dup i 1 add dup i 2 add dup false subspline
} for
n 3 sub dup n 2 sub dup n 1 sub dup 2 copy false subspline
} if
n 2 sub dup n 1 sub dup 2 copy 2 copy false subspline
patternNone not brushLeftArrow not brushRightArrow not and and { ifill } if
brushNone not { istroke } if
0 0 1 1 leftarrow
n 2 sub dup n 1 sub dup rightarrow
} if
end
} dup 0 4 dict put def

/Circ {
newpath
0 360 arc
patternNone not { ifill } if
brushNone not { istroke } if
} def

/CBSpl {
0 begin
dup 2 gt {
storexyn
newpath
n 1 sub dup 0 0 1 1 2 2 true subspline
1 1 n 3 sub {
/i exch def
i 1 sub dup i dup i 1 add dup i 2 add dup false subspline
} for
n 3 sub dup n 2 sub dup n 1 sub dup 0 0 false subspline
n 2 sub dup n 1 sub dup 0 0 1 1 false subspline
patternNone not { ifill } if
brushNone not { istroke } if
} {
Poly
} ifelse
end
} dup 0 4 dict put def

/Elli {
0 begin
newpath
4 2 roll
translate
scale
0 0 1 0 360 arc
patternNone not { ifill } if
brushNone not { istroke } if
end
} dup 0 1 dict put def

/Line {
0 begin
2 storexyn
newpath
x 0 get y 0 get moveto
x 1 get y 1 get lineto
brushNone not { istroke } if
0 0 1 1 leftarrow
0 0 1 1 rightarrow
end
} dup 0 4 dict put def

/MLine {
0 begin
storexyn
newpath
n 1 gt {
x 0 get y 0 get moveto
1 1 n 1 sub {
/i exch def
x i get y i get lineto
} for
patternNone not brushLeftArrow not brushRightArrow not and and { ifill } if
brushNone not { istroke } if
0 0 1 1 leftarrow
n 2 sub dup n 1 sub dup rightarrow
} if
end
} dup 0 4 dict put def

/Poly {
3 1 roll
newpath
moveto
-1 add
{ lineto } repeat
closepath
patternNone not { ifill } if
brushNone not { istroke } if
} def

/Rect {
0 begin
/t exch def
/r exch def
/b exch def
/l exch def
newpath
l b moveto
l t lineto
r t lineto
r b lineto
closepath
patternNone not { ifill } if
brushNone not { istroke } if
end
} dup 0 4 dict put def

/Text {
ishow
} def

/idef {
dup where { pop pop pop } { exch def } ifelse
} def

/ifill {
0 begin
gsave
patternGrayLevel -1 ne {
fgred bgred fgred sub patternGrayLevel mul add
fggreen bggreen fggreen sub patternGrayLevel mul add
fgblue bgblue fgblue sub patternGrayLevel mul add setrgbcolor
eofill
} {
eoclip
originalCTM setmatrix
pathbbox /t exch def /r exch def /b exch def /l exch def
/w r l sub ceiling cvi def
/h t b sub ceiling cvi def
/imageByteWidth w 8 div ceiling cvi def
/imageHeight h def
bgred bggreen bgblue setrgbcolor
eofill
fgred fggreen fgblue setrgbcolor
w 0 gt h 0 gt and {
l b translate w h scale
w h true [w 0 0 h neg 0 h] { patternproc } imagemask
} if
} ifelse
grestore
end
} dup 0 8 dict put def

/istroke {
gsave
brushDashOffset -1 eq {
[] 0 setdash
1 setgray
} {
brushDashArray brushDashOffset setdash
fgred fggreen fgblue setrgbcolor
} ifelse
brushWidth setlinewidth
originalCTM setmatrix
stroke
grestore
} def

/ishow {
0 begin
gsave
fgred fggreen fgblue setrgbcolor
/fontDict printFont findfont printSize scalefont dup setfont def
/descender fontDict begin 0 [FontBBox] 1 get FontMatrix end
transform exch pop def
/vertoffset 0 descender sub printSize sub printFont /Courier ne
printFont /Courier-Bold ne and { 1 add } if def {
0 vertoffset moveto show
/vertoffset vertoffset printSize sub def
} forall
grestore
end
} dup 0 3 dict put def

/patternproc {
0 begin
/patternByteLength patternString length def
/patternHeight patternByteLength 8 mul sqrt cvi def
/patternWidth patternHeight def
/patternByteWidth patternWidth 8 idiv def
/imageByteMaxLength imageByteWidth imageHeight mul
stringLimit patternByteWidth sub min def
/imageMaxHeight imageByteMaxLength imageByteWidth idiv patternHeight idiv
patternHeight mul patternHeight max def
/imageHeight imageHeight imageMaxHeight sub store
/imageString imageByteWidth imageMaxHeight mul patternByteWidth add string def
0 1 imageMaxHeight 1 sub {
/y exch def
/patternRow y patternByteWidth mul patternByteLength mod def
/patternRowString patternString patternRow patternByteWidth getinterval def
/imageRow y imageByteWidth mul def
0 patternByteWidth imageByteWidth 1 sub {
/x exch def
imageString imageRow x add patternRowString putinterval
} for
} for
imageString
end
} dup 0 12 dict put def

/min {
dup 3 2 roll dup 4 3 roll lt { exch } if pop
} def

/max {
dup 3 2 roll dup 4 3 roll gt { exch } if pop
} def

/arrowhead {
0 begin
transform originalCTM itransform
/taily exch def
/tailx exch def
transform originalCTM itransform
/tipy exch def
/tipx exch def
/dy tipy taily sub def
/dx tipx tailx sub def
/angle dx 0 ne dy 0 ne or { dy dx atan } { 90 } ifelse def
gsave
originalCTM setmatrix
tipx tipy translate
angle rotate
newpath
0 0 moveto
arrowHeight neg arrowWidth 2 div lineto
arrowHeight neg arrowWidth 2 div neg lineto
closepath
patternNone not {
originalCTM setmatrix
/padtip arrowHeight 2 exp 0.25 arrowWidth 2 exp mul add sqrt brushWidth mul
arrowWidth div def
/padtail brushWidth 2 div def
tipx tipy translate
angle rotate
padtip 0 translate
arrowHeight padtip add padtail add arrowHeight div dup scale
arrowheadpath
ifill
} if
brushNone not {
originalCTM setmatrix
tipx tipy translate
angle rotate
arrowheadpath
istroke
} if
grestore
end
} dup 0 9 dict put def

/arrowheadpath {
newpath
0 0 moveto
arrowHeight neg arrowWidth 2 div lineto
arrowHeight neg arrowWidth 2 div neg lineto
closepath
} def

/leftarrow {
0 begin
y exch get /taily exch def
x exch get /tailx exch def
y exch get /tipy exch def
x exch get /tipx exch def
brushLeftArrow { tipx tipy tailx taily arrowhead } if
end
} dup 0 4 dict put def

/rightarrow {
0 begin
y exch get /tipy exch def
x exch get /tipx exch def
y exch get /taily exch def
x exch get /tailx exch def
brushRightArrow { tipx tipy tailx taily arrowhead } if
end
} dup 0 4 dict put def

/midpoint {
0 begin
/y1 exch def
/x1 exch def
/y0 exch def
/x0 exch def
x0 x1 add 2 div
y0 y1 add 2 div
end
} dup 0 4 dict put def

/thirdpoint {
0 begin
/y1 exch def
/x1 exch def
/y0 exch def
/x0 exch def
x0 2 mul x1 add 3 div
y0 2 mul y1 add 3 div
end
} dup 0 4 dict put def

/subspline {
0 begin
/movetoNeeded exch def
y exch get /y3 exch def
x exch get /x3 exch def
y exch get /y2 exch def
x exch get /x2 exch def
y exch get /y1 exch def
x exch get /x1 exch def
y exch get /y0 exch def
x exch get /x0 exch def
x1 y1 x2 y2 thirdpoint
/p1y exch def
/p1x exch def
x2 y2 x1 y1 thirdpoint
/p2y exch def
/p2x exch def
x1 y1 x0 y0 thirdpoint
p1x p1y midpoint
/p0y exch def
/p0x exch def
x2 y2 x3 y3 thirdpoint
p2x p2y midpoint
/p3y exch def
/p3x exch def
movetoNeeded { p0x p0y moveto } if
p1x p1y p2x p2y p3x p3y curveto
end
} dup 0 17 dict put def

/storexyn {
/n exch def
/y n array def
/x n array def
n 1 sub -1 0 {
/i exch def
y i 3 2 roll put
x i 3 2 roll put
} for
} def




Begin
[ 0.757895 0 0 0.757895 0 0 ] concat
/originalCTM matrix currentmatrix def

Begin %I Line
1 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
0 SetP
[ 0.5 0 0 0.5 65.75 531.5 ] concat
269 515 415 515 Line
End

Begin %I Line
1 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
0 SetP
[ 0.5 0 0 0.5 65.75 531.5 ] concat
269 515 269 431 Line
End

Begin %I Line
1 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
0 SetP
[ 0.5 0 0 0.5 65.75 531.5 ] concat
415 515 415 431 Line
End

Begin %I Line
1 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
0 SetP
[ 0.5 0 0 0.5 65.75 531.5 ] concat
415 431 395 431 Line
End

Begin %I Line
1 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
0 SetP
[ 0.5 0 0 0.5 65.75 531.5 ] concat
269 431 289 431 Line
End

Begin %I Line
1 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
0 SetP
[ 0.5 0 0 0.5 65.75 531.5 ] concat
289 431 289 411 Line
End

Begin %I Line
1 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
0 SetP
[ 0.5 0 0 0.5 65.75 531.5 ] concat
395 431 395 411 Line
End

Begin %I Line
1 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
0 SetP
[ 0.5 0 0 0.5 65.4999 530.5 ] concat
269 411 415 411 Line
End

Begin %I Line
1 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
0 SetP
[ 0.5 0 0 0.5 65.75 531.5 ] concat
268 409 268 263 Line
End

Begin %I Line
1 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
0 SetP
[ 0.5 0 0 0.5 65.75 531.5 ] concat
414 409 414 263 Line
End

Begin %I Line
1 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
0 SetP
[ 0.5 0 0 0.5 65.4999 657.5 ] concat
415 11 269 11 Line
End

Begin %I Line
1 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
0 SetP
[ 0.5 0 0 0.5 65.4999 541.5 ] concat
269 453 205 453 Line
End

Begin %I Line
1 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
0 SetP
[ 0.5 0 0 0.5 65.75 541.5 ] concat
269 327 205 327 Line
End

Begin %I Line
1 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
0 SetP
[ 0.5 0 0 0.5 65.75 541.5 ] concat
269 285 205 285 Line
End

Begin %I Line
1 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
0 SetP
[ 0.5 0 0 0.5 65.4999 541.5 ] concat
415 305 479 305 Line
End

Begin %I Text
0 0 0 SetCFg
/Times-Bold 14 SetF
[ 1 0 0 1 221.75 733 ] concat
[
(MUX)
] Text
End

Begin %I Text
0 0 0 SetCFg
/Times-Bold 14 SetF
[ 1 0 0 1 203.75 774 ] concat
[
(G)
] Text
End

Begin %I Text
0 0 0 SetCFg
/Times-Bold 14 SetF
[ 1 0 0 1 203.75 690 ] concat
[
(1)
] Text
End

Begin %I Text
0 0 0 SetCFg
/Times-Bold 14 SetF
[ 1 0 0 1 157.25 710.5 ] concat
[
(A)
] Text
End

Begin %I Text
0 0 0 SetCFg
/Times-Bold 14 SetF
[ 1 0 0 1 157.25 690.5 ] concat
[
(B)
] Text
End

Begin %I Text
0 0 0 SetCFg
/Times-Bold 14 SetF
[ 1 0 0 1 308.75 700.5 ] concat
[
(Y)
] Text
End

Begin %I Text
0 0 0 SetCFg
/Times-Bold 14 SetF
[ 1 0 0 1 157 773.5 ] concat
[
(S)
] Text
End

Begin %I Text
0 0 0 SetCFg
/Times-Bold 14 SetF
[ 1 0 0 1 203.5 711 ] concat
[
(1)
] Text
End

Begin %I Text
0 0 0 SetCFg
/Times-Bold 14 SetF
[ 1 0 0 1 202.5 726.5 ] concat
[
(_)
] Text
End

Begin %I Text
0 0 0 SetCFg
/Times-Bold 14 SetF
[ 1 0 0 1 216 774.5 ] concat
[
(1)
] Text
End

End %I eop

showpage


end
%%EndDocument
 224 1278 a
 endTexFig
224 1766 a Fb(W)l(aarheidstab)q(el:)p 224 1818 344 2 v 223
1874 2 57 v 253 1857 a(S)p 307 1874 V 55 w(A)51 b(B)p 475 1874
V 484 1874 V 59 w(Y)p 567 1874 V 224 1876 344 2 v 223 1932
2 57 v 252 1916 a(L)p 307 1932 V 56 w(L)62 b(-)p 475 1932 V
484 1932 V 71 w(L)p 567 1932 V 223 1989 V 252 1972 a(L)p 307
1989 V 53 w(H)d(-)p 475 1989 V 484 1989 V 68 w(H)p 567 1989
V 223 2045 V 249 2028 a(H)p 307 2045 V 59 w(-)k(L)p 475 2045
V 484 2045 V 64 w(L)p 567 2045 V 223 2102 V 249 2085 a(H)p
307 2102 V 59 w(-)d(H)p 475 2102 V 484 2102 V 58 w(H)p 567
2102 V 224 2103 344 2 v 224 2244 a(Propagatietijden:)p 224
2304 895 2 v 223 2360 2 57 v 249 2343 a(P)o(arameter)p 480
2360 V 56 w(V)l(an)p 624 2360 V 62 w(Naar)p 778 2360 V 53 w(T)o(yp)p
909 2360 V 49 w(Eenheid)p 1118 2360 V 224 2362 895 2 v 223
2419 2 57 v 294 2402 a(T)327 2409 y Fa(P)5 b(LH)p 480 2419
V 506 2402 a Fb(A,)14 b(B)p 624 2419 V 86 w(Y)p 778 2419 V
96 w(0.7)p 909 2419 V 119 w(ns)p 1118 2419 V 223 2475 V 294
2458 a(T)327 2465 y Fa(P)5 b(H)s(L)p 480 2475 V 506 2458 a
Fb(A,)14 b(B)p 624 2475 V 86 w(Y)p 778 2475 V 96 w(0.8)p 909
2475 V 119 w(ns)p 1118 2475 V 223 2531 V 294 2514 a(T)327 2521
y Fa(P)5 b(LH)p 480 2531 V 540 2514 a Fb(S)p 624 2531 V 120
w(Y)p 778 2531 V 96 w(1.2)p 909 2531 V 119 w(ns)p 1118 2531
V 223 2588 V 294 2571 a(T)327 2578 y Fa(P)g(H)s(L)p 480 2588
V 540 2571 a Fb(S)p 624 2588 V 120 w(Y)p 778 2588 V 96 w(1.1)p
909 2588 V 119 w(ns)p 1118 2588 V 224 2590 895 2 v 223 2646
2 57 v 275 2629 a(\001T)346 2636 y Fa(P)g(LH)p 480 2646 V 519
2629 a Fb(alle)p 624 2646 V 99 w(Y)p 778 2646 V 96 w(1.1)p
909 2646 V 80 w(ns/pF)p 1118 2646 V 223 2702 V 275 2686 a(\001T)346
2693 y Fa(P)g(H)s(L)p 480 2702 V 519 2686 a Fb(alle)p 624 2702
V 99 w(Y)p 778 2702 V 96 w(0.9)p 909 2702 V 80 w(ns/pF)p 1118
2702 V 224 2704 895 2 v 223 2761 2 57 v 318 2744 a(C)351 2751
y Fa(in)p 480 2761 V 506 2744 a Fb(A,)14 b(B)p 624 2761 V 50
w(GND)p 778 2761 V 50 w(0.12)p 909 2761 V 101 w(pF)p 1118 2761
V 223 2817 V 318 2800 a(C)351 2807 y Fa(in)p 480 2817 V 540
2800 a Fb(S)p 624 2817 V 84 w(GND)p 778 2817 V 50 w(0.26)p
909 2817 V 101 w(pF)p 1118 2817 V 224 2819 895 2 v 960 3625
a(1)p eop
%%Page: 2 2
bop 224 1050 a Fb(circuit:)224 1110 y
 11796480 8139564 8091156 21379072 23220961 31969935 startTexFig
224 1110 a
%%BeginDocument: mu111.cir.eps

50 dict begin

/arrowHeight 8 def
/arrowWidth 4 def
/none null def
/numGraphicParameters 17 def
/stringLimit 65535 def

/Begin {
save
numGraphicParameters dict begin
} def

/End {
end
restore
} def

/SetB {
dup type /nulltype eq {
pop
false /brushRightArrow idef
false /brushLeftArrow idef
true /brushNone idef
} {
/brushDashOffset idef
/brushDashArray idef
0 ne /brushRightArrow idef
0 ne /brushLeftArrow idef
/brushWidth idef
false /brushNone idef
} ifelse
} def

/SetCFg {
/fgblue idef
/fggreen idef
/fgred idef
} def

/SetCBg {
/bgblue idef
/bggreen idef
/bgred idef
} def

/SetF {
/printSize idef
/printFont idef
} def

/SetP {
dup type /nulltype eq {
pop true /patternNone idef
} {
/patternGrayLevel idef
patternGrayLevel -1 eq {
/patternString idef
} if
false /patternNone idef
} ifelse
} def

/BSpl {
0 begin
storexyn
newpath
n 1 gt {
0 0 0 0 0 0 1 1 true subspline
n 2 gt {
0 0 0 0 1 1 2 2 false subspline
1 1 n 3 sub {
/i exch def
i 1 sub dup i dup i 1 add dup i 2 add dup false subspline
} for
n 3 sub dup n 2 sub dup n 1 sub dup 2 copy false subspline
} if
n 2 sub dup n 1 sub dup 2 copy 2 copy false subspline
patternNone not brushLeftArrow not brushRightArrow not and and { ifill } if
brushNone not { istroke } if
0 0 1 1 leftarrow
n 2 sub dup n 1 sub dup rightarrow
} if
end
} dup 0 4 dict put def

/Circ {
newpath
0 360 arc
patternNone not { ifill } if
brushNone not { istroke } if
} def

/CBSpl {
0 begin
dup 2 gt {
storexyn
newpath
n 1 sub dup 0 0 1 1 2 2 true subspline
1 1 n 3 sub {
/i exch def
i 1 sub dup i dup i 1 add dup i 2 add dup false subspline
} for
n 3 sub dup n 2 sub dup n 1 sub dup 0 0 false subspline
n 2 sub dup n 1 sub dup 0 0 1 1 false subspline
patternNone not { ifill } if
brushNone not { istroke } if
} {
Poly
} ifelse
end
} dup 0 4 dict put def

/Elli {
0 begin
newpath
4 2 roll
translate
scale
0 0 1 0 360 arc
patternNone not { ifill } if
brushNone not { istroke } if
end
} dup 0 1 dict put def

/Line {
0 begin
2 storexyn
newpath
x 0 get y 0 get moveto
x 1 get y 1 get lineto
brushNone not { istroke } if
0 0 1 1 leftarrow
0 0 1 1 rightarrow
end
} dup 0 4 dict put def

/MLine {
0 begin
storexyn
newpath
n 1 gt {
x 0 get y 0 get moveto
1 1 n 1 sub {
/i exch def
x i get y i get lineto
} for
patternNone not brushLeftArrow not brushRightArrow not and and { ifill } if
brushNone not { istroke } if
0 0 1 1 leftarrow
n 2 sub dup n 1 sub dup rightarrow
} if
end
} dup 0 4 dict put def

/Poly {
3 1 roll
newpath
moveto
-1 add
{ lineto } repeat
closepath
patternNone not { ifill } if
brushNone not { istroke } if
} def

/Rect {
0 begin
/t exch def
/r exch def
/b exch def
/l exch def
newpath
l b moveto
l t lineto
r t lineto
r b lineto
closepath
patternNone not { ifill } if
brushNone not { istroke } if
end
} dup 0 4 dict put def

/Text {
ishow
} def

/idef {
dup where { pop pop pop } { exch def } ifelse
} def

/ifill {
0 begin
gsave
patternGrayLevel -1 ne {
fgred bgred fgred sub patternGrayLevel mul add
fggreen bggreen fggreen sub patternGrayLevel mul add
fgblue bgblue fgblue sub patternGrayLevel mul add setrgbcolor
eofill
} {
eoclip
originalCTM setmatrix
pathbbox /t exch def /r exch def /b exch def /l exch def
/w r l sub ceiling cvi def
/h t b sub ceiling cvi def
/imageByteWidth w 8 div ceiling cvi def
/imageHeight h def
bgred bggreen bgblue setrgbcolor
eofill
fgred fggreen fgblue setrgbcolor
w 0 gt h 0 gt and {
l b translate w h scale
w h true [w 0 0 h neg 0 h] { patternproc } imagemask
} if
} ifelse
grestore
end
} dup 0 8 dict put def

/istroke {
gsave
brushDashOffset -1 eq {
[] 0 setdash
1 setgray
} {
brushDashArray brushDashOffset setdash
fgred fggreen fgblue setrgbcolor
} ifelse
brushWidth setlinewidth
originalCTM setmatrix
stroke
grestore
} def

/ishow {
0 begin
gsave
fgred fggreen fgblue setrgbcolor
/fontDict printFont findfont printSize scalefont dup setfont def
/descender fontDict begin 0 [FontBBox] 1 get FontMatrix end
transform exch pop def
/vertoffset 0 descender sub printSize sub printFont /Courier ne
printFont /Courier-Bold ne and { 1 add } if def {
0 vertoffset moveto show
/vertoffset vertoffset printSize sub def
} forall
grestore
end
} dup 0 3 dict put def

/patternproc {
0 begin
/patternByteLength patternString length def
/patternHeight patternByteLength 8 mul sqrt cvi def
/patternWidth patternHeight def
/patternByteWidth patternWidth 8 idiv def
/imageByteMaxLength imageByteWidth imageHeight mul
stringLimit patternByteWidth sub min def
/imageMaxHeight imageByteMaxLength imageByteWidth idiv patternHeight idiv
patternHeight mul patternHeight max def
/imageHeight imageHeight imageMaxHeight sub store
/imageString imageByteWidth imageMaxHeight mul patternByteWidth add string def
0 1 imageMaxHeight 1 sub {
/y exch def
/patternRow y patternByteWidth mul patternByteLength mod def
/patternRowString patternString patternRow patternByteWidth getinterval def
/imageRow y imageByteWidth mul def
0 patternByteWidth imageByteWidth 1 sub {
/x exch def
imageString imageRow x add patternRowString putinterval
} for
} for
imageString
end
} dup 0 12 dict put def

/min {
dup 3 2 roll dup 4 3 roll lt { exch } if pop
} def

/max {
dup 3 2 roll dup 4 3 roll gt { exch } if pop
} def

/arrowhead {
0 begin
transform originalCTM itransform
/taily exch def
/tailx exch def
transform originalCTM itransform
/tipy exch def
/tipx exch def
/dy tipy taily sub def
/dx tipx tailx sub def
/angle dx 0 ne dy 0 ne or { dy dx atan } { 90 } ifelse def
gsave
originalCTM setmatrix
tipx tipy translate
angle rotate
newpath
0 0 moveto
arrowHeight neg arrowWidth 2 div lineto
arrowHeight neg arrowWidth 2 div neg lineto
closepath
patternNone not {
originalCTM setmatrix
/padtip arrowHeight 2 exp 0.25 arrowWidth 2 exp mul add sqrt brushWidth mul
arrowWidth div def
/padtail brushWidth 2 div def
tipx tipy translate
angle rotate
padtip 0 translate
arrowHeight padtip add padtail add arrowHeight div dup scale
arrowheadpath
ifill
} if
brushNone not {
originalCTM setmatrix
tipx tipy translate
angle rotate
arrowheadpath
istroke
} if
grestore
end
} dup 0 9 dict put def

/arrowheadpath {
newpath
0 0 moveto
arrowHeight neg arrowWidth 2 div lineto
arrowHeight neg arrowWidth 2 div neg lineto
closepath
} def

/leftarrow {
0 begin
y exch get /taily exch def
x exch get /tailx exch def
y exch get /tipy exch def
x exch get /tipx exch def
brushLeftArrow { tipx tipy tailx taily arrowhead } if
end
} dup 0 4 dict put def

/rightarrow {
0 begin
y exch get /tipy exch def
x exch get /tipx exch def
y exch get /taily exch def
x exch get /tailx exch def
brushRightArrow { tipx tipy tailx taily arrowhead } if
end
} dup 0 4 dict put def

/midpoint {
0 begin
/y1 exch def
/x1 exch def
/y0 exch def
/x0 exch def
x0 x1 add 2 div
y0 y1 add 2 div
end
} dup 0 4 dict put def

/thirdpoint {
0 begin
/y1 exch def
/x1 exch def
/y0 exch def
/x0 exch def
x0 2 mul x1 add 3 div
y0 2 mul y1 add 3 div
end
} dup 0 4 dict put def

/subspline {
0 begin
/movetoNeeded exch def
y exch get /y3 exch def
x exch get /x3 exch def
y exch get /y2 exch def
x exch get /x2 exch def
y exch get /y1 exch def
x exch get /x1 exch def
y exch get /y0 exch def
x exch get /x0 exch def
x1 y1 x2 y2 thirdpoint
/p1y exch def
/p1x exch def
x2 y2 x1 y1 thirdpoint
/p2y exch def
/p2x exch def
x1 y1 x0 y0 thirdpoint
p1x p1y midpoint
/p0y exch def
/p0x exch def
x2 y2 x3 y3 thirdpoint
p2x p2y midpoint
/p3y exch def
/p3x exch def
movetoNeeded { p0x p0y moveto } if
p1x p1y p2x p2y p3x p3y curveto
end
} dup 0 17 dict put def

/storexyn {
/n exch def
/y n array def
/x n array def
n 1 sub -1 0 {
/i exch def
y i 3 2 roll put
x i 3 2 roll put
} for
} def




Begin
[ 0.757895 0 0 0.757895 0 0 ] concat
/originalCTM matrix currentmatrix def

Begin %I Rect
1 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 0.5 0 0 0.5 129.25 352 ] concat
184 326 268 410 Rect
End

Begin %I Rect
1 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 1 0 0 1 -59.0001 159 ] concat
280 272 322 314 Rect
End

Begin %I Rect
1 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 0.5 0 0 0.5 129.25 352 ] concat
352 326 436 410 Rect
End

Begin %I Rect
1 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 0.5 0 0 0.5 139.25 352 ] concat
500 242 584 326 Rect
End

Begin %I Rect
1 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 0.5 0 0 0.5 129.25 352 ] concat
352 158 436 242 Rect
End

Begin %I Line
1 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 0.5 0 0 0.5 129.25 352 ] concat
436 368 478 368 Line
End

Begin %I Line
1 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 0.5 0 0 0.5 129 352 ] concat
478 368 478 200 Line
End

Begin %I Line
1 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 0.5 0 0 0.5 129.25 352 ] concat
478 200 436 200 Line
End

Begin %I Line
1 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 0.5 0 0 0.5 129.25 352 ] concat
478 284 520 284 Line
End

Begin %I Line
1 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 0.5 0 0 0.5 129.25 352 ] concat
604 284 646 284 Line
End

Begin %I Line
1 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 0.5 0 0 0.5 129.25 352 ] concat
268 368 352 368 Line
End

Begin %I Line
1 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 0.5 0 0 0.5 129.25 352 ] concat
268 200 352 200 Line
End

Begin %I Line
1 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 0.5 0 0 0.5 129 352 ] concat
394 410 394 452 Line
End

Begin %I Line
1 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 0.5 0 0 0.5 129 352 ] concat
310 284 394 284 Line
End

Begin %I Line
1 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 0.5 0 0 0.5 129 352 ] concat
394 284 394 242 Line
End

Begin %I Rect
1 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 0.5 0 0 0.5 129.25 352 ] concat
184 494 268 578 Rect
End

Begin %I Line
1 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 0.5 0 0 0.5 142.5 420 ] concat
241 400 283 400 Line
End

Begin %I Line
1 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 0.5 0 0 0.5 142.75 420 ] concat
241 422 261 400 Line
End

Begin %I Line
1 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 0.5 0 0 0.5 142.75 134.5 ] concat
241 657 261 635 Line
End

Begin %I Line
1 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 1 0 0 1 36.25 89 ] concat
227 458 237 447 Line
End

Begin %I Line
1 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 1 0 0 1 35.9999 88.9998 ] concat
248 531 258 531 Line
End

Begin %I Line
1 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 1 0 0 1 36.25 89 ] concat
248 500 174 500 Line
End

Begin %I Line
1 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 1 0 0 1 36.25 89 ] concat
174 531 174 500 Line
End

Begin %I Line
1 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 1 0 0 1 36.25 89 ] concat
143 531 185 531 Line
End

Begin %I Line
1 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 1 0 0 1 36.25 89 ] concat
143 447 185 447 Line
End

Begin %I Line
1 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 1 0 0 1 36.25 89 ] concat
143 363 185 363 Line
End

Begin %I Text
0 0 0 SetCFg
/Times-Bold 14 SetF
[ 1 0 0 1 168.25 625 ] concat
[
(S)
] Text
End

Begin %I Text
0 0 0 SetCFg
/Times-Bold 14 SetF
[ 1 0 0 1 164.25 542 ] concat
[
(A)
] Text
End

Begin %I Text
0 0 0 SetCFg
/Times-Bold 14 SetF
[ 1 0 0 1 164.25 457 ] concat
[
(B)
] Text
End

Begin %I Text
0 0 0 SetCFg
/Times-Bold 14 SetF
[ 1 0 0 1 242.25 463 ] concat
[
(1)
] Text
End

Begin %I Text
0 0 0 SetCFg
/Times-Bold 14 SetF
[ 1 0 0 1 242.25 631 ] concat
[
(1)
] Text
End

Begin %I Text
0 0 0 SetCFg
/Times-Bold 14 SetF
[ 1 0 0 1 242.25 547 ] concat
[
(1)
] Text
End

Begin %I Text
0 0 0 SetCFg
/Times-Bold 14 SetF
[ 1 0 0 1 326.25 547 ] concat
[
(P)
] Text
End

Begin %I Text
0 0 0 SetCFg
/Times-Bold 14 SetF
[ 1 0 0 1 326.25 463 ] concat
[
(P)
] Text
End

Begin %I Text
0 0 0 SetCFg
/Times-Bold 14 SetF
[ 1 0 0 1 410.25 505 ] concat
[
(1)
] Text
End

Begin %I Line
1 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
0 SetP
[ 1 0 0 1 122 135 ] concat
162 454 162 359 Line
End

Begin %I Line
1 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
0 SetP
[ 0.5 0 0 0.5 299 363.5 ] concat
264 283 286 261 Line
End

Begin %I Text
0 0 0 SetCFg
/Times-Bold 14 SetF
[ 1 0 0 1 455.5 499.5 ] concat
[
(Y)
] Text
End

Begin %I Line
1 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
0 SetP
[ 1 0 0 1 89 184 ] concat
205 436 237 436 Line
End

Begin %I Line
1 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
0 SetP
[ 1 0 0 1 89 184 ] concat
237 436 237 394 Line
End

End %I eop

showpage


end
%%EndDocument
 224 1110 a
 endTexFig
224 2005 a Fb(la)o(y)o(out:)224 2066 y
 11796480 20171980 4604723 1907671 34535424 53151662 startTexFig
224 2066 a
%%BeginDocument: mu111.lay.eps


/fillBigPaths {/bigPathFill exch def} def

  true  fillBigPaths   % Goes well if poly has no holes.
		       % plotted incorrectly. The result is that the masks
		       % that contain such polygons are not filled
		       % (contour only), but the layout is otherwise
		       % plotted normally.


/EPSLayDict 140 dict def EPSLayDict begin
/Style 40 dict def
0 setlinewidth

/pathCount 0 def
/pathLimit 1000 def
/pathLimitExceeded false def


/plotFont {
    aload pop
    /FontName exch def
    /LambdaFs exch def
    /MaxFs    exch def
    /MinFs    exch def
    % [(FontName) FontName (LambdaFs) LambdaFs (MaxFs) MaxFs (MinFs) MinFs] ==
    % /FontSize MinFs def % avoid use before define
} def
[8 8 1 /Helvetica-Bold] plotFont % default 8 point non-proportional

/patternScale {aload pop /Bfreq exch def} def
[1] patternScale % default

/plotRotate {/Rotate exch def} def
false plotRotate % default

/Tailwd    1 def % width of arrow tails, in points
/Tipwd     6 def % width of arrow heads, in points

/plotPass {/passnumber exch def} def
1 plotPass

/basketweave  [1 8 <d1e3c5885c3e1d88>] def
/fishscale    [1 8 <3e418080e3140808>] def

/p2 [2 16 <1010200840048002000100000000000010100820044002800100000000000000>]
def
/p4 [2 16 <18000c00040000000004000c00180030006000c0008000008000c00060003000>]
def
/p5 [2 16 <c071c00101e001e001e0e001e001e3c103c003c0000f1c0f1c0f1c000070c071>]
def
/p6 [2 16 <1000001000000200000040000008010000000000100200000000004000000001>]
def
/p7 [2 16 <002100210021ffe1e1e1e1e1e1ffe1ff210021002100e1ffe1e1e1e1ffe1ffe1>]
def
/p8 [2 16 <0000000080c0c0c160033006180c0c1806300360c1c0c08000000000cccccccc>]
def
/p9 [2 16 <00000000c0c0c0c00000000000c000c000000000cccccccc0000000000c000c0>]
def
/p13 [2 16 <00ff00ff00ff00ff00ff00ff00ff00ffff00ff00ff00ff00ff00ff00ff00ff00>]
def
/p15 [2 16 <ffff0202040408081010202040408080ffff4040202010100808040402020101>]
def
/p16 [2 16 <4040202010100808040402020101808040402020101008080404020201018080>]
def
/p17 [2 16 <c0c06060303018180c0c060603038181c0c06060303018180c0c060603038181>]
def
/p18 [2 16 <0180024004200810100820044002800180014002200410080810042002400180>]
def
/p19 [2 16 <8080808080808080808080808080808080808080808080808080808080808080>]
def

/lines0    [1 8 <ff000000ff000000>] def % lines 0 degrees inclined (horiz)
/lines45   [1 8 <0102040810204080>] def % lines 45 degrees inclined (/)
/lines90   [1 8 <1111111111111111>] def % lines 90 degrees inclined (vert)
/lines135  [1 8 <8040201008040201>] def % lines 135 degrees inclined (\)
/flines0   [1 8 <ffff000000000000>] def % fat lines 0 dg. inclined (horiz)
/flines45  [1 8 <03060C183060C081>] def % fat lines 45 dg. inclined (/)
/flines90  [1 8 <3333333333333333>] def % fat lines 90 dg. inclined (vert)
/flines135 [1 8 <81C06030180C0603>] def % fat lines 135 dg. inclined (\)
/cross0    [1 8 <ff01010101010101>] def % lines 0 and 90
/cross45   [1 8 <110a040a11a040a0>] def % lines 45 and 135
/fcross45  [1 8 <331e0c1e33e1c0e1>] def % lines 45 and 135
/black     [1 8 <ffffffffffffffff>] def % black (or dots 100%)
/dots50    [1 8 <aa55aa55aa55aa55>] def % dots 50%
/dots25    [1 8 <8822882288228822>] def % dots 25%
/dots12    [1 8 <8800220088002200>] def % dots ~12% (1 of 8)
/dots6     [1 8 <8800000088000000>] def % dots ~ 6% (1 of 16)
/dots3     [1 8 <8000000080000000>] def % dots ~ 3% (1 of 32)
/dots2     [1 8 <8000000000000000>] def % dots ~ 2% (1 of 64)
/white     [1 8 <0000000000000000>] def % white (or dots 0%)

/bitison {
    /ybit exch def /xbit exch def
    bstring ybit bwidth mul
    xbit 8 idiv add get
    1 7 xbit 8 mod sub bitshift
    and 0 ne
} def

/setpattern {
    /bstring exch def
    /onbits 0 def /offbits 0 def
    freq 0 {
      /y exch def /x exch def
      /xindex x 1 add 2 div bpside mul cvi def
      /yindex y 1 add 2 div bpside mul cvi def
      xindex yindex bitison
        {/onbits onbits 1 add def 1}
        {/offbits offbits 1 add def 0}
        ifelse
    } setscreen
    {} settransfer
    offbits offbits onbits add div setgray
} def

/arrow {
    0 begin
    /ArrowType exch def 
    /headlength exch def
    /halfheadthickness exch 2 div def
    /halfthickness exch 2 div def
    /tipy exch def /tipx exch def
    /taily exch def /tailx exch def
    /dx tipx tailx sub def
    /dy tipy taily sub def
    /arrowlength dx dx mul dy dy mul add sqrt def
    /angle dy dx atan def
    /base arrowlength headlength sub def
                                                            
    /savematrix matrix currentmatrix def
    tailx taily translate
    angle rotate

    /Forward false def
    /Backward false def
    ArrowType 1 eq {/Forward  true def} if
    ArrowType 3 eq {/Forward  true def} if
    ArrowType 2 eq {/Backward true def} if
    ArrowType 3 eq {/Backward true def} if
    0 0 moveto

    Backward {
        headlength halfheadthickness neg lineto
        headlength halfthickness neg lineto
    } { 0 halfthickness neg lineto
    } ifelse

    Forward {
        base halfthickness neg lineto
        base halfheadthickness neg lineto
        arrowlength 0 lineto
        base halfheadthickness lineto
        base halfthickness lineto
    } { arrowlength halfthickness neg lineto
        arrowlength halfthickness lineto
    } ifelse

    Backward {
        headlength halfthickness lineto
        headlength halfheadthickness lineto
    } { 0 halfthickness lineto
    } ifelse

    closepath savematrix setmatrix end
} def
/arrow load 0 16 dict put

/Text {
    0 begin
    /text exch def
    /dy exch def /dx exch def
    /Y exch def /X exch def
    text stringwidth pop /W exch def
    /H FontSize def

    % center text
    /Y Y FontSize 2 div sub def
    /X X W 2 div sub def

    % adjust according to dx,dy
    /X X dx W mul 2 div sub def
    /Y Y dy H mul 2 div sub def

    gsave
	% determine bbox of text.
	newpath X Y moveto text true charpath pathbbox
	/st exch def /sr exch def /sb exch def /sl exch def

	% define a margin around bbox of text
	/Margin st sb sub 0.2 mul def
	/sb sb Margin sub def
	/sl sl Margin sub def
	/sr sr Margin add def
	/st st Margin add def

	% construct path corresponding to bbox
	newpath sl sb moveto sr sb lineto sr st lineto sl st lineto
	closepath

	% make it white.
	gsave 1 setgray fill grestore

	% stroke outline
	gsave 0 setlinewidth stroke grestore

    grestore

    % print text.
    X Y moveto text show

    end
} def
/Text load 0 20 dict put

/BeginLayout {
    /EPSLayGC save def
    /TForm exch def % TForm ==

    /bbxl TForm 4 get def
    /bbxr TForm 6 get def
    /bbyb TForm 5 get def
    /bbyt TForm 7 get def
    /Resolution TForm 8 get def

    % Rotate if necessary
    Rotate {
        /xl TForm 7 get neg def
        /xr TForm 5 get neg def
        /yb TForm 4 get def
        /yt TForm 6 get def

        TForm 4 xl put
        TForm 6 xr put
        TForm 5 yb put
        TForm 7 yt put
    } if % TForm ==

    /DrawWd TForm 2 get TForm 0 get sub def
    /DrawHt TForm 3 get TForm 1 get sub def

    /PicHt TForm 7 get TForm 5 get sub def
    /PicWd TForm 6 get TForm 4 get sub def   

    /WdScale DrawWd PicWd div def
    /HtScale DrawHt PicHt div def

    /ScaleFactor
        WdScale HtScale lt {WdScale} {HtScale} ifelse def

    % now move to center
    TForm 0 get DrawWd PicWd ScaleFactor mul sub 2 div add
    TForm 1 get DrawHt PicHt ScaleFactor mul sub 2 div add
    translate

    % Finally, perform scaling.  [(ScaleFactor) ScaleFactor] ==
    ScaleFactor ScaleFactor scale

    % but following items should not be scaled, so undo it.
    /Tailwd Tailwd ScaleFactor div def
    /Tipwd Tipwd ScaleFactor div def

    % Compute {min,max}fontsize and target fontsize in scaled coordinates.
    /MinFs MinFs ScaleFactor div def
    /MaxFs MaxFs ScaleFactor div def
    /FontSize LambdaFs Resolution mul def
    % [MinFs MaxFs FontSize] ==

    % Apply min and max, and set font
    FontSize MinFs lt {/FontSize MinFs def} if
    FontSize MaxFs gt {/FontSize MaxFs def} if
    FontName findfont FontSize scalefont setfont

    % set user origin
    TForm 4 get neg TForm 5 get neg translate
    Rotate {90 rotate} if
} def

/SetClipPath {
    newpath
    bbxl bbyb moveto
    bbxr bbyb lineto
    bbxr bbyt lineto
    bbxl bbyt lineto
    closepath
    clip
} def

/SetLayer {
    /Layer exch def
    gsave
    passnumber 1 eq {SetClipPath} if
    SetStyle clear newpath
    /pathLimitExceeded false def
} def

/EndLayer {
    pathCount 0 gt {DrawPolygons} if
    grestore
} def

/P {moveto /pathCount pathCount 1 add def} def

/T {lineto /pathCount pathCount 1 add def} def

/L {
    T closepath
    pathCount pathLimit gt {
	/pathLimitExceeded true def DrawPolygons
    } if
} def

/B {
    /dy exch def /dx exch def /yb exch def /xl exch def
    /xr xl dx add def
    /yt yb dy add def
    xl yb P xr yb T xr yt T xl yt L
} def

/R {
    /dy exch def /dx exch def /y0 exch def /x0 exch def
    x0 y0 P dx 0 rlineto 0 dy rlineto
    /pathCount pathCount 2 add def
} def

/X {
    exch 0 rlineto 0 exch rlineto
    /pathCount pathCount 2 add def
} def

/C {
    exch 0 rlineto 0 exch rlineto
    % [(current) currentpoint (x0) x0 (y0) y0 ] ==
    x0 currentpoint pop sub 0 rlineto
    closepath
    /pathCount pathCount 4 add def
    pathCount pathLimit gt {
	/pathLimitExceeded true def DrawPolygons
    } if
} def

/EndLayout {
    EndLayer showpage
    % EPSLayDict length =
    EPSLayGC restore
    end
} def

/DrawPolygons {
    % pathLimitExceeded { [(pathLimitExceeded) pathCount Layer] == } if
    passnumber 1 eq {
	pathLimitExceeded false eq bigPathFill true eq or {
	    gsave FillPolygons grestore
	} if
    } if
    % Always stroke polygon boundaries, because a mask
    % might be skipped in pass 2.
    OutlinePolygons 
    /pathCount 0 def
} def

/FillPolygons {FillPattern setpattern fill} def

/OutlinePolygons {
    /bwidth 1    def
    /bpside 8    def
    <ffffffffffffffff> setpattern
    LineWd setlinewidth
    0 setgray
    stroke
} def

/SetStyle {
    Style Layer get aload pop
    /LineWd exch Resolution mul def % in lambda's
    /Pfreq exch def
    aload pop
    /FillPattern exch def
    /bpside exch def
    /bwidth exch def
    /freq 300 bpside div Pfreq div Bfreq div def
    % [(bpside, bwidth, freq) bpside bwidth freq (FillPattern) FillPattern]==
} def

/plotArrow {
    /ArrowType exch def
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 x2 y2 Tailwd Tipwd Tipwd 2 mul ArrowType arrow
    fill
} def

/align false def
/termTextAlignment {
    aload pop
    /ady exch def
    /adx exch def
    /align true def
} def

/plotTerminal {
    /name exch def
    /dy exch def /dx exch def
    /yt exch def /yb exch def /xr exch def /xl exch def
    passnumber 2 eq {
	LineWd setlinewidth
	newpath
	xl yb moveto xr yb lineto xr yt lineto xl yt lineto
	closepath stroke
	newpath xl yb moveto xr yt lineto stroke
	newpath xr yb moveto xl yt lineto stroke
    } if
    passnumber 3 eq {
	align true eq {/dx adx def /dy ady def} if
        xl xr add 2 div yb yt add 2 div dx dy name Text
    } if
} def

/PlotBBox {
    passnumber 2 eq {
	1 setlinewidth newpath
	bbxl bbyb moveto
	bbxr bbyb lineto
	bbxr bbyt lineto
	bbxl bbyt lineto
	closepath stroke
    } if
} def

/defineStyle {
    /stylearg exch def
    Style stylearg 0 get stylearg 1 3 getinterval put
} def


[5 14 15 /Helvetica-Bold] plotFont
[-1 1] termTextAlignment

[ (bb)     white    1.0    0.1 ] defineStyle
[ (nw)     white    1.0    0.1 ] defineStyle
[ (sp)     white    1.0    0.1 ] defineStyle
[ (sn)     white    1.0    0.1 ] defineStyle
[ (od)     p6       1.0    0.1 ] defineStyle
[ (od)     dots2    1.0    0.1 ] defineStyle
[ (ps)     dots6    1.0    0.1 ] defineStyle
[ (in)     dots12   1.0    0.1 ] defineStyle
[ (con)    black    1.0    0.1 ] defineStyle
[ (cop)    black    1.0    0.1 ] defineStyle
[ (cps)    black    1.0    0.1 ] defineStyle
[ (ins)    dots25   1.0    0.1 ] defineStyle
[ (cos)    fcross45 1.0    2.0 ] defineStyle
[ (cb)     white    1.0    4.0 ] defineStyle
[ (t_od)   p6       1.0    0.1 ] defineStyle
[ (t_ps)   p18      1.0    0.1 ] defineStyle
[ (t_in)   p16      1.0    0.1 ] defineStyle
[ (t_ins)  p15      1.0    0.1 ] defineStyle
[70 29 525 808 0 -40 1256 2112 4] BeginLayout
1 plotPass
(od) SetLayer
96 0 1160 136 B
96 344 1160 464 B
96 1176 1160 592 B
96 1976 1160 136 B
EndLayer
(ps) SetLayer
272 838 P
216 894 T
216 968 T
136 968 T
136 888 T
176 888 T
240 824 T
240 328 T
222 310 T
176 264 T
136 264 T
136 184 T
216 184 T
216 254 T
272 310 L
272 1798 P
216 1854 T
216 1928 T
136 1928 T
136 1848 T
176 1848 T
240 1784 T
240 1160 T
222 1142 T
176 1096 T
136 1096 T
136 1016 T
216 1016 T
216 1086 T
272 1142 L
432 838 P
376 894 T
376 968 T
296 968 T
296 888 T
336 888 T
400 824 T
400 328 T
382 310 T
336 264 T
296 264 T
296 184 T
376 184 T
376 254 T
432 310 L
432 1798 P
376 1854 T
376 1928 T
296 1928 T
296 1848 T
336 1848 T
400 1784 T
400 1160 T
382 1142 T
336 1096 T
296 1096 T
296 1016 T
376 1016 T
376 1086 T
432 1142 L
592 838 P
536 894 T
536 968 T
456 968 T
456 888 T
496 888 T
560 824 T
560 328 T
542 310 T
496 264 T
456 264 T
456 184 T
536 184 T
536 254 T
592 310 L
592 1798 P
536 1854 T
536 1928 T
456 1928 T
456 1848 T
496 1848 T
560 1784 T
560 1160 T
542 1142 T
496 1096 T
456 1096 T
456 1016 T
536 1016 T
536 1086 T
592 1142 L
752 838 P
696 894 T
696 968 T
616 968 T
616 888 T
656 888 T
720 824 T
720 328 T
702 310 T
656 264 T
616 264 T
616 184 T
696 184 T
696 254 T
752 310 L
752 1798 P
696 1854 T
696 1928 T
616 1928 T
616 1848 T
656 1848 T
720 1784 T
720 1160 T
702 1142 T
656 1096 T
616 1096 T
616 1016 T
696 1016 T
696 1086 T
752 1142 L
912 838 P
856 894 T
856 968 T
776 968 T
776 888 T
816 888 T
880 824 T
880 328 T
862 310 T
816 264 T
776 264 T
776 184 T
856 184 T
856 254 T
912 310 L
912 1798 P
856 1854 T
856 1928 T
776 1928 T
776 1848 T
816 1848 T
880 1784 T
880 1160 T
862 1142 T
816 1096 T
776 1096 T
776 1016 T
856 1016 T
856 1086 T
912 1142 L
1072 838 P
1016 894 T
1016 968 T
936 968 T
936 888 T
976 888 T
1040 824 T
1040 328 T
1022 310 T
976 264 T
936 264 T
936 184 T
1016 184 T
1016 254 T
1072 310 L
1072 1798 P
1016 1854 T
1016 1928 T
936 1928 T
936 1848 T
976 1848 T
1040 1784 T
1040 1160 T
1022 1142 T
976 1096 T
936 1096 T
936 1016 T
1016 1016 T
1016 1086 T
1072 1142 L
1232 838 P
1176 894 T
1176 968 T
1096 968 T
1096 888 T
1136 888 T
1200 824 T
1200 328 T
1182 310 T
1136 264 T
1096 264 T
1096 184 T
1176 184 T
1176 254 T
1232 310 L
1232 1798 P
1176 1854 T
1176 1928 T
1096 1928 T
1096 1848 T
1136 1848 T
1200 1784 T
1200 1160 T
1182 1142 T
1136 1096 T
1096 1096 T
1096 1016 T
1176 1016 T
1176 1086 T
1232 1142 L
EndLayer
(in) SetLayer
216 1096 -80 -80 R
16 -48 X
-16 -80 X
80 80 X
-16 48 C
376 1096 -80 -80 R
16 -48 X
-16 -80 X
80 80 X
-16 48 C
536 424 -80 -80 R
16 -80 X
-16 -80 X
80 80 X
-16 80 C
536 680 -80 -16 R
-240 16 X
-16 48 X
16 80 X
-80 -80 X
16 -48 X
-16 -80 X
80 16 X
240 -16 C
536 1256 -80 -80 R
16 -368 X
-16 -80 X
80 80 X
-16 368 C
536 1928 -80 -80 R
16 -224 X
-272 224 X
16 80 X
-80 -80 X
16 -272 X
368 272 C
696 264 -16 272 R
-528 -272 X
-16 -80 X
80 80 X
-16 224 X
432 -224 X
-16 -80 C
696 1384 -80 -16 R
-400 16 X
-80 -80 X
16 -48 X
-16 -80 X
80 80 X
-16 48 X
16 16 X
400 -16 C
696 1928 -80 -80 R
16 -80 X
-16 -80 X
80 80 X
-16 80 C
856 680 -80 -16 R
-80 16 X
-80 -80 X
80 16 X
80 -16 C
856 1768 -80 -80 R
16 -48 X
-16 -80 X
80 80 X
-16 48 C
1000 1240 -208 -144 R
-16 -80 X
16 -48 X
-16 -80 X
80 80 X
-16 48 X
16 80 X
-16 96 C
1016 1096 -80 -80 R
16 -48 X
-16 -80 X
16 -96 X
-256 16 X
-16 368 X
16 80 X
-80 -80 X
16 -368 X
-16 -80 X
80 16 X
304 144 X
16 80 X
-16 48 C
1176 1256 -80 -80 R
16 -368 X
-16 -80 X
80 80 X
-16 368 C
1256 136 -96 48 R
16 80 X
-16 144 X
-144 16 X
-80 -80 X
80 16 X
96 -96 X
-16 -80 X
16 -48 X
-752 208 X
16 80 X
-80 -80 X
16 -208 X
-216 -136 C
1256 2112 -1160 -136 R
216 -208 X
-16 -80 X
80 80 X
-16 208 X
752 -48 X
-16 -80 X
16 -96 X
-96 16 X
-80 -80 X
80 16 X
144 144 X
16 80 X
-16 48 C
EndLayer
(ins) SetLayer
216 1256 -80 -80 R
16 -368 X
-16 -80 X
80 80 X
-16 368 C
536 680 -80 -80 R
16 -176 X
-16 -80 X
80 80 X
-16 176 C
696 1768 -80 -80 R
16 -304 X
-16 -80 X
80 80 X
-16 304 C
856 1640 -80 -80 R
16 -320 X
-160 -560 X
-16 -80 X
80 80 X
-16 512 X
160 368 C
EndLayer
(con) SetLayer
156 620 40 40 B
316 364 40 40 B
476 748 40 40 B
636 748 40 40 B
796 620 40 40 B
956 364 40 40 B
1116 748 40 40 B
EndLayer
(cop) SetLayer
156 1324 40 40 B
316 1708 40 40 B
476 1196 40 40 B
636 1196 40 40 B
796 1708 40 40 B
956 1708 40 40 B
1116 1196 40 40 B
EndLayer
(cos) SetLayer
156 748 40 40 B
156 1196 40 40 B
476 364 40 40 B
476 620 40 40 B
636 620 40 40 B
636 1324 40 40 B
636 1708 40 40 B
796 1580 40 40 B
EndLayer
(cps) SetLayer
156 204 40 40 B
156 908 40 40 B
156 1036 40 40 B
156 1868 40 40 B
316 908 40 40 B
316 1036 40 40 B
476 204 40 40 B
476 1868 40 40 B
636 204 40 40 B
636 1868 40 40 B
796 908 40 40 B
796 1036 40 40 B
956 908 40 40 B
956 1036 40 40 B
1116 204 40 40 B
1116 1868 40 40 B
EndLayer
(cb) SetLayer
EndLayer
2 plotPass
(od) SetLayer
96 0 1160 136 B
96 344 1160 464 B
96 1176 1160 592 B
96 1976 1160 136 B
EndLayer
(t_od) SetLayer
EndLayer
(ps) SetLayer
272 838 P
216 894 T
216 968 T
136 968 T
136 888 T
176 888 T
240 824 T
240 328 T
222 310 T
176 264 T
136 264 T
136 184 T
216 184 T
216 254 T
272 310 L
272 1798 P
216 1854 T
216 1928 T
136 1928 T
136 1848 T
176 1848 T
240 1784 T
240 1160 T
222 1142 T
176 1096 T
136 1096 T
136 1016 T
216 1016 T
216 1086 T
272 1142 L
432 838 P
376 894 T
376 968 T
296 968 T
296 888 T
336 888 T
400 824 T
400 328 T
382 310 T
336 264 T
296 264 T
296 184 T
376 184 T
376 254 T
432 310 L
432 1798 P
376 1854 T
376 1928 T
296 1928 T
296 1848 T
336 1848 T
400 1784 T
400 1160 T
382 1142 T
336 1096 T
296 1096 T
296 1016 T
376 1016 T
376 1086 T
432 1142 L
592 838 P
536 894 T
536 968 T
456 968 T
456 888 T
496 888 T
560 824 T
560 328 T
542 310 T
496 264 T
456 264 T
456 184 T
536 184 T
536 254 T
592 310 L
592 1798 P
536 1854 T
536 1928 T
456 1928 T
456 1848 T
496 1848 T
560 1784 T
560 1160 T
542 1142 T
496 1096 T
456 1096 T
456 1016 T
536 1016 T
536 1086 T
592 1142 L
752 838 P
696 894 T
696 968 T
616 968 T
616 888 T
656 888 T
720 824 T
720 328 T
702 310 T
656 264 T
616 264 T
616 184 T
696 184 T
696 254 T
752 310 L
752 1798 P
696 1854 T
696 1928 T
616 1928 T
616 1848 T
656 1848 T
720 1784 T
720 1160 T
702 1142 T
656 1096 T
616 1096 T
616 1016 T
696 1016 T
696 1086 T
752 1142 L
912 838 P
856 894 T
856 968 T
776 968 T
776 888 T
816 888 T
880 824 T
880 328 T
862 310 T
816 264 T
776 264 T
776 184 T
856 184 T
856 254 T
912 310 L
912 1798 P
856 1854 T
856 1928 T
776 1928 T
776 1848 T
816 1848 T
880 1784 T
880 1160 T
862 1142 T
816 1096 T
776 1096 T
776 1016 T
856 1016 T
856 1086 T
912 1142 L
1072 838 P
1016 894 T
1016 968 T
936 968 T
936 888 T
976 888 T
1040 824 T
1040 328 T
1022 310 T
976 264 T
936 264 T
936 184 T
1016 184 T
1016 254 T
1072 310 L
1072 1798 P
1016 1854 T
1016 1928 T
936 1928 T
936 1848 T
976 1848 T
1040 1784 T
1040 1160 T
1022 1142 T
976 1096 T
936 1096 T
936 1016 T
1016 1016 T
1016 1086 T
1072 1142 L
1232 838 P
1176 894 T
1176 968 T
1096 968 T
1096 888 T
1136 888 T
1200 824 T
1200 328 T
1182 310 T
1136 264 T
1096 264 T
1096 184 T
1176 184 T
1176 254 T
1232 310 L
1232 1798 P
1176 1854 T
1176 1928 T
1096 1928 T
1096 1848 T
1136 1848 T
1200 1784 T
1200 1160 T
1182 1142 T
1136 1096 T
1096 1096 T
1096 1016 T
1176 1016 T
1176 1086 T
1232 1142 L
EndLayer
(t_ps) SetLayer
EndLayer
(in) SetLayer
216 1096 -80 -80 R
16 -48 X
-16 -80 X
80 80 X
-16 48 C
376 1096 -80 -80 R
16 -48 X
-16 -80 X
80 80 X
-16 48 C
536 424 -80 -80 R
16 -80 X
-16 -80 X
80 80 X
-16 80 C
536 680 -80 -16 R
-240 16 X
-16 48 X
16 80 X
-80 -80 X
16 -48 X
-16 -80 X
80 16 X
240 -16 C
536 1256 -80 -80 R
16 -368 X
-16 -80 X
80 80 X
-16 368 C
536 1928 -80 -80 R
16 -224 X
-272 224 X
16 80 X
-80 -80 X
16 -272 X
368 272 C
696 264 -16 272 R
-528 -272 X
-16 -80 X
80 80 X
-16 224 X
432 -224 X
-16 -80 C
696 1384 -80 -16 R
-400 16 X
-80 -80 X
16 -48 X
-16 -80 X
80 80 X
-16 48 X
16 16 X
400 -16 C
696 1928 -80 -80 R
16 -80 X
-16 -80 X
80 80 X
-16 80 C
856 680 -80 -16 R
-80 16 X
-80 -80 X
80 16 X
80 -16 C
856 1768 -80 -80 R
16 -48 X
-16 -80 X
80 80 X
-16 48 C
1000 1240 -208 -144 R
-16 -80 X
16 -48 X
-16 -80 X
80 80 X
-16 48 X
16 80 X
-16 96 C
1016 1096 -80 -80 R
16 -48 X
-16 -80 X
16 -96 X
-256 16 X
-16 368 X
16 80 X
-80 -80 X
16 -368 X
-16 -80 X
80 16 X
304 144 X
16 80 X
-16 48 C
1176 1256 -80 -80 R
16 -368 X
-16 -80 X
80 80 X
-16 368 C
1256 136 -96 48 R
16 80 X
-16 144 X
-144 16 X
-80 -80 X
80 16 X
96 -96 X
-16 -80 X
16 -48 X
-752 208 X
16 80 X
-80 -80 X
16 -208 X
-216 -136 C
1256 2112 -1160 -136 R
216 -208 X
-16 -80 X
80 80 X
-16 208 X
752 -48 X
-16 -80 X
16 -96 X
-96 16 X
-80 -80 X
80 16 X
144 144 X
16 80 X
-16 48 C
EndLayer
(t_in) SetLayer
152 200 2020 2068 0 0 (vdd) plotTerminal
152 200 44 92 0 0 (vss) plotTerminal
152 200 488 536 0 0 (S) plotTerminal
1112 1160 904 952 0 0 (Y) plotTerminal
792 840 904 952 0 0 (B) plotTerminal
312 360 904 952 0 0 (A) plotTerminal
EndLayer
(ins) SetLayer
216 1256 -80 -80 R
16 -368 X
-16 -80 X
80 80 X
-16 368 C
536 680 -80 -80 R
16 -176 X
-16 -80 X
80 80 X
-16 176 C
696 1768 -80 -80 R
16 -304 X
-16 -80 X
80 80 X
-16 304 C
856 1640 -80 -80 R
16 -320 X
-160 -560 X
-16 -80 X
80 80 X
-16 512 X
160 368 C
EndLayer
(t_ins) SetLayer
EndLayer
3 plotPass
(t_od) SetLayer
EndLayer
(t_ps) SetLayer
EndLayer
(t_in) SetLayer
152 200 2020 2068 0 0 (vdd) plotTerminal
152 200 44 92 0 0 (vss) plotTerminal
152 200 488 536 0 0 (S) plotTerminal
1112 1160 904 952 0 0 (Y) plotTerminal
792 840 904 952 0 0 (B) plotTerminal
312 360 904 952 0 0 (A) plotTerminal
EndLayer
(t_ins) SetLayer
EndLayer
EndLayout
%%EndDocument
 224 2066 a
 endTexFig
960 3625 a Fb(2)p eop
%%Trailer
end
userdict /end-hook known{end-hook}if
%%EOF
